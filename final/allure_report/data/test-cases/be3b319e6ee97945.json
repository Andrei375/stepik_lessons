{
  "uid" : "be3b319e6ee97945",
  "name" : "test_guest_can_add_product_to_basket[offer7]",
  "fullName" : "final.test_product_page.TestProductPage#test_guest_can_add_product_to_basket",
  "historyId" : "d83e8b4e30d4834dce5fb653d320215d",
  "time" : {
    "start" : 1616963201960,
    "stop" : 1616963205533,
    "duration" : 3573
  },
  "status" : "skipped",
  "statusMessage" : "XFAIL\n\nAssertionError: Product name is not correct",
  "statusTrace" : "self = <final.test_product_page.TestProductPage object at 0x000001433B243310>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c880ba6566e33068c319f9e152e6dc4f\")>, promo_offer = 'offer7'\n\n    @pytest.mark.parametrize('promo_offer',\n                             [\"offer0\", \"offer1\", \"offer2\", \"offer3\", \"offer4\", \"offer5\", \"offer6\",\n                              pytest.param(\"offer7\", marks=pytest.mark.xfail),\n                              \"offer8\", \"offer9\"])\n    def test_guest_can_add_product_to_basket(self, browser, promo_offer):\n        product_link = f\"{link}/?promo={promo_offer}\"\n        page = ProductPage(browser, product_link)\n        page.open()\n    \n        page.add_to_basket()\n        page.solve_quiz_and_get_code()\n    \n>       page.should_be_correct_product_in_basket()\n\nfinal\\test_product_page.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfinal\\pages\\product_page.py:12: in should_be_correct_product_in_basket\n    self.should_be_correct_product_name()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <final.pages.product_page.ProductPage object at 0x000001433B257AC0>\n\n    def should_be_correct_product_name(self):\n        # Act\n        product_name = self.browser.find_element(*ProductPageLocators.PRODUCT_NAME).text\n        correct_product_name = self.browser.find_element(*ProductPageLocators.CORRECT_PRODUCT_NAME).text\n        # Assert\n>       assert product_name == correct_product_name, \"Product name is not correct\"\nE       AssertionError: Product name is not correct\n\nfinal\\pages\\product_page.py:20: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "browser",
    "time" : {
      "start" : 1616963200234,
      "stop" : 1616963201958,
      "duration" : 1724
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "skipped",
    "statusMessage" : "XFAIL\n\nAssertionError: Product name is not correct",
    "statusTrace" : "self = <final.test_product_page.TestProductPage object at 0x000001433B243310>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c880ba6566e33068c319f9e152e6dc4f\")>, promo_offer = 'offer7'\n\n    @pytest.mark.parametrize('promo_offer',\n                             [\"offer0\", \"offer1\", \"offer2\", \"offer3\", \"offer4\", \"offer5\", \"offer6\",\n                              pytest.param(\"offer7\", marks=pytest.mark.xfail),\n                              \"offer8\", \"offer9\"])\n    def test_guest_can_add_product_to_basket(self, browser, promo_offer):\n        product_link = f\"{link}/?promo={promo_offer}\"\n        page = ProductPage(browser, product_link)\n        page.open()\n    \n        page.add_to_basket()\n        page.solve_quiz_and_get_code()\n    \n>       page.should_be_correct_product_in_basket()\n\nfinal\\test_product_page.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfinal\\pages\\product_page.py:12: in should_be_correct_product_in_basket\n    self.should_be_correct_product_name()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <final.pages.product_page.ProductPage object at 0x000001433B257AC0>\n\n    def should_be_correct_product_name(self):\n        # Act\n        product_name = self.browser.find_element(*ProductPageLocators.PRODUCT_NAME).text\n        correct_product_name = self.browser.find_element(*ProductPageLocators.CORRECT_PRODUCT_NAME).text\n        # Assert\n>       assert product_name == correct_product_name, \"Product name is not correct\"\nE       AssertionError: Product name is not correct\n\nfinal\\pages\\product_page.py:20: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "5c2fa9f35b775c86",
      "name" : "stdout",
      "source" : "5c2fa9f35b775c86.txt",
      "type" : "text/plain",
      "size" : 82
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "browser::0",
    "time" : {
      "start" : 1616963205548,
      "stop" : 1616963208148,
      "duration" : 2600
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.xfail"
  }, {
    "name" : "parentSuite",
    "value" : "final"
  }, {
    "name" : "suite",
    "value" : "test_product_page"
  }, {
    "name" : "subSuite",
    "value" : "TestProductPage"
  }, {
    "name" : "host",
    "value" : "andreihp4525s"
  }, {
    "name" : "thread",
    "value" : "3024-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "final.test_product_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "promo_offer",
    "value" : "'offer7'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "tags" : [ "@pytest.mark.xfail" ]
  },
  "source" : "be3b319e6ee97945.json",
  "parameterValues" : [ "'offer7'" ]
}